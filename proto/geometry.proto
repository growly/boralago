syntax = "proto3";

package vlsiraptor;

// Represents a point in our (Cartesian) layout space.
message Point {
  int64 x = 1;
  int64 y = 2;
}

// Rectangle primitive.
message Rectangle {
  // The layer this rectangle sits on.
  int64 layer = 1;

  // The lower-left corner of the rectangle.
  Point lower_left = 2;

  int64 width = 3;
  int64 height = 4;
}

message Polygon {
  // The layer this polygon sits on.
  Layer layer = 1;

  // The list of vertices defining the (convex) polygon.
  // We assume that the last and first point will also be joined by a line
  // segment.
  repeated Point vertices = 2;
}

message ChunkOfShapes {
  repeated Polygon polygons = 1; // let's say at most 1000 
  repeated Rectangle rectangles = 1; // imagine, say, 1B entries
}

message Layer {
  layer: int
  datatype: int 
}

message Cell { // old folks call this a "Cell"
// all the geom info for a section of layout 

  ChunkOfPolygons polygons = 2;
  repeated Instance instances = 3;
}

message Instance { // old folks would call this "instance"
  // The origin point for this instance, relative to which all child primitives
  // are placed.
  Point lower_left = 1;

  oneof {
    // If present, the Instance message to be placed is fetched from the given
    // location.
    // TODO(aryap): Either explicitly or implicitly list which URIs make sense.
    string source_uri = 2;

    string instance = 3;
  }
}

message Library {
  metadata: Whatever, 
  cells: repeated Whoever // flat, but names have `top.mid1.bot2` or `top::mid1` etc 
}

message Geometry { // Not really sure what this is! 
  repeated PlacedInstance placed_instances = 1;
}

