syntax = "proto3";

package vlsiraptor;

// Represents a point in our (Cartesian) layout space.
message Point {
  int64 x = 1;
  int64 y = 2;
}

message Layer {
  int64 something = 1;
  int64 something_else = 2;
}

// Rectangle primitive.
message Rectangle {
  // The lower-left corner of the rectangle.
  Point lower_left = 2;

  int64 width = 3;
  int64 height = 4;
}

message Polygon {
  // The list of vertices defining the (convex) polygon. We assume that the
  // last and first point will also be joined by a line segment.
  repeated Point vertices = 2;
}

message LayeredShapes {
  Layer layer = 1;
  repeated Rectangle rectangles = 2;
  repeated Polygon polygons = 3;
}

// A "Cell" is defined by taking the union of all CellChunks with the same
// cell_name.
message CellChunk {
  string cell_name = 1;

  // This can't just be a map because "Layer" is not an appropriate type for a
  // key (i.e. can't be sure there's a hash function for it).
  repeated LayerShapes shapes = 2;

  // Instances of other Cells in this Cell.
  repeated Instance instances = 3;
}

// Optional metadata for a cell with the given cell_name.
message CellInfo {
  string cell_name = 1;

  // I don't actually know if this is necessary. But it's an example of a way
  // to define additional information about a cell in a separate message.
  string author = 100;
  string copyright = 101;
}

message Instance {
  // The origin point for this instance, relative to which all child primitives
  // are placed.
  string name = 1;  // TODO(aryap): Do we need this?
  string cell_name = 3;
  int32 rotation_degrees = 4;
  Point lower_left = 5;
}

// A collection of chunks of cells.
message ChunkLibrary {
  repeated CellInfo infos = 1;
  repeated CellChunk chunks = 2;
}

message Geometry {
  // The top instance.
  Instance top_instance = 1;

  // Definitions of cell chunks which implicity define cells.
  repeated ChunkLibrary chunk_libraries = 100;

  // Pointers to sources of chunk libraries possibly necessary to complete this
  // layout.
  repeated string chunk_library_uris = 200;
}
